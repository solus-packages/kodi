name       : kodi
version    : '17.6'
release    : 36
source     :
    - https://github.com/xbmc/xbmc/archive/17.6-Krypton.tar.gz : c8312fe92e5bab1cdac1da93d60baed88fa1574146c50c44e3c86d01671c2b1d
license    : GPL-2.0
component  : desktop.multimedia
summary    : Free and open source software media center
description: |
    Kodi® (formerly known as XBMC™) is an award-winning free and open source (GPL) software media center for playing videos, music, pictures, games, and more.
networking : yes
builddeps  :
    - pkgconfig(alsa)
    - pkgconfig(avahi-client)
    - pkgconfig(bluez)
    - pkgconfig(dbus-1)
    - pkgconfig(glu)
    - pkgconfig(gnutls)
    - pkgconfig(lcms2)
    - pkgconfig(libass)
    - pkgconfig(libavformat)
    - pkgconfig(libbluray)
    - pkgconfig(libcap)
    - pkgconfig(libcdio)
    - pkgconfig(libcec)
    - pkgconfig(libcurl)
    - pkgconfig(libjpeg)
    - pkgconfig(libmicrohttpd)
    - pkgconfig(libnfs)
    - pkgconfig(libplist)
    - pkgconfig(libpng)
    - pkgconfig(libpulse)
    - pkgconfig(libssh)
    - pkgconfig(libusb-1.0)
    - pkgconfig(libva)
    - pkgconfig(libxslt)
    - pkgconfig(libzip)
    - pkgconfig(lirc)
    - pkgconfig(mariadb)
    - pkgconfig(smbclient)
    - pkgconfig(sqlite3)
    - pkgconfig(taglib)
    - pkgconfig(tinyxml)
    - pkgconfig(vdpau)
    - pkgconfig(xrandr)
    - pkgconfig(yajl)
    - crossguid-devel
    - giflib-devel
    - git
    - gperf
    - libunistring-devel
    - lzo-devel
    - openjdk-8-devel
    - shairplay-devel
    - swig
replaces   :
    - kodi-addon-inputstream-adaptive
rundeps    :
    - shairplay
setup      : |
    # WARN: Do NOT enable binutils-gold, even if kodi prefers it
    #   --  binutils-gold makes ffmpeg barf on gnutls during ./configure
    #
    mkdir kodi-build && cd kodi-build
    %cmake \
      "$workdir/project/cmake" \
      -DBUILD_SHARED_LIBS=ON \
      -DENABLE_EVENTCLIENTS=ON \
      -DLIRC_DEVICE=/var/run/lirc/lircd

    # INFO: To display available configuration variables and
    #       their detected values, uncomment the following:
    #
    # cmake ../project/cmake -L | awk '{if(f)print} /-- Cache values/{f=1}'
    # fail_for_inspection  # stop the build here to inspect config options

    # INFO: The kodi binary addon build system doesn't behave like one would
    #       expect and thus configuring the addons using PREFIX=/usr is
    #       actually a deliberate choice:
    #       By specifying a non-writeable prefix, we trick the build system into
    #       installing everything under its own made-up .install/ PREFIX inside
    #       the addon-build directory, from which we can then install the build
    #       artifacts manually in the install section below.
    #
    cd .. && mkdir addon-build && cd addon-build
    %cmake \
    "$workdir/project/cmake/addons" \
    -DCMAKE_PREFIX=/usr \
    -DADDONS_TO_BUILD="inputstream.adaptive peripheral.joystick"
build      : |
    # noiser build for troubleshooting purposes
    # make VERBOSE=1 -j1
    %make -C kodi-build

    # build binary addons
    %make -C addon-build
install    : |
    # install kodi proper
    %make_install -C kodi-build

    # INFO: This is *by far* the easiest way to install the binary addons
    #       Note that the '-a' flag (for 'archive') preserves the permissions
    #       as created by the kodi binary addons makefile install target.
    # 
    echo "Installing binary addons:"
    cp -av $workdir/addon-build/.install/lib/* $installdir/%libdir%
    cp -av $workdir/addon-build/.install/share/* $installdir/usr/share/
check      : |
    # INFO: Tests last forever. You can run them locally but please make sure
    #       the commands are commented out before publishing
    #
    #%make check -C kodi-build

